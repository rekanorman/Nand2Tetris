import java.io.File;

public class JackTokenizer {
	
	/**
	 * Opens the given .jack file and gets ready to tokenize it.
	 * @param inputFile		The .jack file to be tokenized.
	 */
	public JackTokenizer(File inputFile) {
		
	}
	
	/**
	 * Returns true if there are more tokens in the input
	 * file, false otherwise.
	 * @return	true if there are more tokens, otherwise false.
	 */
	public boolean hasMoreTokens() {
		return false;
	}
	
	/**
	 * Determines the next token in the input, and sets
	 * this as the current token.
	 * Should only be called if hasMoreTokens() returns true.
	 * Initially there is no current token until advance() is
	 * called for the first time.
	 */
	public void advance() {
		
	}
	
	/**
	 * Returns the type of the current token, as a constant
	 * of TokenType.
	 * @return	The type of the current token.
	 */
	public TokenType tokenType() {
		return TokenType.SYMBOL;
	}
	
	/**
	 * Returns the actual value of the keyword which is the
	 * current token, as a constant of type Keyword.
	 * Should only be called if tokenType() returns KEYWORD.
	 * @return		The value of the keyword which is the current token.
	 */
	public Keyword keyword() {
		return Keyword.BOOLEAN;
	}
	
	/**
	 * Returns the value of the symbol which is the current
	 * token.
	 * Should only be called when tokenType() returns SYMBOL.
	 * 
	 * @return 		The value of the symbol which is the current token.
	 */
	public String symbol() {
		return null;
	}
	
	/**
	 * Returns the value of the identifier which is the current
	 * token.
	 * Should only be called when tokenType() returns IDENTIFIER.
	 * @return 		The value of the identifier which is the current token.
	 */
	public String identifier() {
		return null;
	}
	
	/**
	 * Returns the value of the integer constant which is the current
	 * token.
	 * Should only be called when tokenType() returns INT_CONSTANTT.
	 * @return 		The value of the integer constant which is the current token.
	 */
	public int intValue() {
		return 0;
	}
	
	/**
	 * Returns the value of the string constant which is the current
	 * token, without the enclosing double quotes.
	 * Should only be called when tokenType() returns STRING_CONSTANT.
	 * @return 		The value of the string constant which is the current token.
	 */
	public String stringValue() {
		return null;
	}
	
	/**
	 * Returns the value of the current token as a String, regardless of
	 * the type of the token.
	 * @return	The value of the current token.
	 */
	public String stringValue() {
		TokenType type = tokenType();
		
		switch (type) {
			case KEYWORD: return keyword().toString();
			case SYMBOL: return symbol();
			case IDENTIFIER: return identifier();
			case INT_CONSTANT: return Integer.toString(intValue());
			case STRING_CONSTANT: return stringValue();
		}
	}
	
	
	
	
	
}
