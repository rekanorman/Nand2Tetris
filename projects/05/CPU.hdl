// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// Determine input to A-register
	Mux16 (a=instruction, b=outalu, sel=instruction[15], out=ina);
	
	// Load bit of A-register
	Not (in=instruction[15], out=ainstruction);
	Or (a=ainstruction, b=instruction[5], out=loada);		// Load A register when a-instruction or A is a destination
	
	ARegister (in=ina, load=loada, out=outa, out[0..14]=addressM);
	
	// Load bit of D register
	And (a=instruction[4], b=instruction[15], out=loadd);		// Load ALU output into D register if D is a destination and c-instruction
	
	DRegister (in=outalu, load=loadd, out=outd);
	
	// Select M/A input of ALU
	Mux16 (a=outa, b=inM, sel=instruction[12], out=inaluam);
	
	ALU (x=outd, y=inaluam, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
		out=outalu, out=outM, zr=zr, ng=ng);
	
	// Determine whether to write to M
	And (a=instruction[15], b=instruction[3], out=writeM);		// Write to M if c-instruction and M is a destination
	
	// Determine whether to jump to instruction selected by A register
	Or (a=zr, b=ng, out=lezero);
	Not (in=lezero, out=gtzero);
	And (a=instruction[2], b=ng, out=jump1);
	And (a=instruction[1], b=zr, out=jump2);
	And (a=instruction[0], b=gtzero, out=jump3);
	Or (a=jump1, b=jump2, out=jump1or2);
	Or (a=jump1or2, b=jump3, out=jump);
	And (a=jump, b=instruction[15], out=loadpc);			// Load pc if jump is true and c-instruction
	
	PC (in=outa, load=loadpc, inc=true, reset=reset, out[0..14]=pc);	
}











